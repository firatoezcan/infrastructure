# Default values for docker-registry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1

updateStrategy: {}
  # type: RollingUpdate
  # rollingUpdate:
  #   maxSurge: 1
  #   maxUnavailable: 0

podAnnotations: {}
podLabels: {}

image:
  repository: registry
  tag: 2.7.1
  pullPolicy: IfNotPresent
# imagePullSecrets:
    # - name: docker
service:
  name: registry
  type: ClusterIP
  # sessionAffinity: None
  # sessionAffinityConfig: {}
  clusterIP: 10.43.11.183
  port: 5000
  # nodePort:
  # loadBalancerIP:
  # loadBalancerSourceRanges:
  annotations: {}
  # foo.io/bar: "true"
ingress:
  enabled: true
  # Used to create an Ingress record.
  hosts:
    - docker-registry.local.dev
  annotations:
    kubernetes.io/ingress.class: "traefik"
    cert-manager.io/cluster-issuer: "mkcert-local"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    # kubernetes.io/tls-acme: "true"
  tls:
    - secretName: "docker-registry-tls-cert"
      hosts:
        - docker-registry.local.dev

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
persistence:
  accessMode: 'ReadWriteOnce'
  enabled: false
  size: 10Gi
  storageClass: 'openebs-hostpath'

# set the type of filesystem to use: filesystem, s3
storage: s3

# Set this to name of secret for tls certs
# tlsSecretName: registry.docker.example.com
secrets:
  haSharedSecret: ""
  htpasswd: "admin:$2y$05$SQc.ZYAuGT6lcArEwYmPmuIt5cfeFhB63QaEJ9bAXrjX53fWHPW4a"
# Secrets for Azure
#   azure:
#     accountName: ""
#     accountKey: ""
#     container: ""
# Secrets for S3 access and secret keys
  s3:
    ## Access Key for MinIO Tenant, base64 encoded (echo -n 'minio' | base64)
    accesskey: bWluaW8=
    ## Secret Key for MinIO Tenant, base64 encoded (echo -n 'minio123' | base64)
    secretkey: bWluaW8xMjM=
# Secrets for Swift username and password
#   swift:
#     username: ""
#     password: ""

# Options for s3 storage type:
s3:
 region: us-east-1
 regionEndpoint: http://minio-docker-registry-hl:9000
 bucket: docker-registry
 encrypt: false
 secure: false

# Options for swift storage type:
# swift:
#  authurl: http://swift.example.com/
#  container: my-container

configData:
  version: 0.1
  log:
    fields:
      service: registry
  storage:
    cache:
      blobdescriptor: inmemory
  http:
    addr: :5000
    headers:
      X-Content-Type-Options: [nosniff]
  health:
    storagedriver:
      enabled: true
      interval: 10s
      threshold: 3

securityContext:
  enabled: true
  runAsUser: 1000
  fsGroup: 1000

priorityClassName: ""

podDisruptionBudget: {}
  # maxUnavailable: 1
  # minAvailable: 2

nodeSelector: {}

affinity: {}

tolerations: []

extraVolumeMounts: []
## Additional volumeMounts to the registry container.
#  - mountPath: /secret-data
#    name: cloudfront-pem-secret
#    readOnly: true

extraVolumes: []
## Additional volumes to the pod.
#  - name: cloudfront-pem-secret
#    secret:
#      secretName: cloudfront-credentials
#      items:
#        - key: cloudfront.pem
#          path: cloudfront.pem
#          mode: 511
